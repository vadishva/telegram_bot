import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.executor import start_webhook
import psycopg2
from dotenv import load_dotenv

# --- 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")
DATABASE_URL = os.getenv("DATABASE_URL")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–∞ (Railway –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç URL)
WEBHOOK_HOST = os.getenv("RAILWAY_STATIC_URL", "https://your-project.up.railway.app")
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", 8000))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- 2. –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ---
class Database:
    def __init__(self):
        self.conn = None
        
    def connect(self):
        try:
            self.conn = psycopg2.connect(DATABASE_URL, sslmode="require")
            logger.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL")
            self._init_db()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            return False
            
    def _init_db(self):
        with self.conn.cursor() as cursor:
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS records (
                    id SERIAL PRIMARY KEY,
                    user_id BIGINT NOT NULL,
                    name TEXT NOT NULL,
                    phone TEXT NOT NULL,
                    date TEXT NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            self.conn.commit()
            
    def add_record(self, user_id, name, phone, date):
        try:
            with self.conn.cursor() as cursor:
                cursor.execute(
                    "INSERT INTO records (user_id, name, phone, date) VALUES (%s, %s, %s, %s)",
                    (user_id, name, phone, date)
                )
                self.conn.commit()
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: {e}")
            return False
            
    def close(self):
        if self.conn:
            self.conn.close()

db = Database()

# --- 3. –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π (FSM) ---
class RecordStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()
    waiting_for_date = State()

# --- 4. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    await message.answer("üìÖ –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏. –ù–∞–∂–º–∏—Ç–µ /register —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")

@dp.message_handler(commands=['register'])
async def register_cmd(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await RecordStates.waiting_for_name.set()

# --- 5. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π ---
@dp.message_handler(state=RecordStates.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    await message.answer("üìû –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await RecordStates.waiting_for_phone.set()

@dp.message_handler(state=RecordStates.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['phone'] = message.text
    await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.07 14:00):")
    await RecordStates.waiting_for_date.set()

@dp.message_handler(state=RecordStates.waiting_for_date)
async def process_date(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    
    if db.add_record(
        user_id=message.from_user.id,
        name=user_data['name'],
        phone=user_data['phone'],
        date=message.text
    ):
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            f"‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\n\n"
            f"‚ñ™ –ò–º—è: {user_data['name']}\n"
            f"‚ñ™ –¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone']}\n"
            f"‚ñ™ –î–∞—Ç–∞: {message.text}\n\n"
            f"–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await bot.send_message(
            ADMIN_ID,
            f"üìå –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!\n\n"
            f"–ö–ª–∏–µ–Ω—Ç: {user_data['name']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone']}\n"
            f"–î–∞—Ç–∞: {message.text}\n"
            f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}"
        )
    else:
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await state.finish()

# --- 6. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–æ–º ---
async def on_startup(dp):
    if not db.connect():
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
        return
    
    await bot.set_webhook(WEBHOOK_URL)
    logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {WEBHOOK_URL}")

async def on_shutdown(dp):
    logger.warning("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    await bot.delete_webhook()
    db.close()
    logger.warning("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# --- 7. –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
if __name__ == '__main__':
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT
    )